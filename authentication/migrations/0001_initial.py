# Generated by Django 5.0.6 on 2024-05-16 12:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='User Email', max_length=254, unique=True, verbose_name='User Email')),
                ('first_name', models.CharField(help_text='User first name', max_length=150, verbose_name='User first name')),
                ('last_name', models.CharField(help_text='User last name', max_length=150, verbose_name='User last name')),
                ('mobile_number', models.CharField(help_text='Mobile number of the user', max_length=25, verbose_name='Mobile number of the user')),
                ('birth_date', models.DateTimeField(blank=True, help_text='User birthdate', null=True, verbose_name='User birthdate')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('prefer_not_to_say', 'Prefer Not To Say')], help_text='User Gender', max_length=20, verbose_name='User Gender')),
                ('marital_status', models.CharField(blank=True, choices=[('married', 'Married'), ('not_married', 'Not Married'), ('prefer_not_to_say', 'Prefer Not To Say')], help_text='Marital Status', max_length=20, null=True, verbose_name='Marital Status')),
                ('address', models.CharField(blank=True, help_text='User Address', max_length=225, null=True, verbose_name='User Address')),
                ('otp', models.CharField(blank=True, help_text='Password reset OTP', max_length=10, null=True, verbose_name='Password reset OTP')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
                'base_manager_name': 'objects',
                'default_manager_name': 'objects',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
